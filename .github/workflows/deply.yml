name: deploy-docker

on:
  push:
    branches: [deploy-docker]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: lotto-automation

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          role-to-assume: ${{ secrets.AWS_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true # ECR 토큰 마스킹

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # 민감한 정보 숨기기 위한 설정
          set +x

          # Docker 이미지 빌드 및 푸시 (latest 태그만)
          echo "Building and pushing Docker image..."
          docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:latest . > /dev/null 2>&1
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest > /dev/null 2>&1

          # 이미지 URI를 환경변수로 저장
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT

          echo "✅ Image build and push completed successfully"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Serverless CLI
        run: npm install -g serverless

      - name: Install Serverless plugins
        run: |
          serverless plugin install --name serverless-offline@12.0.4

      - name: Deploy to AWS Lambda
        run: serverless deploy --stage Prod --region ${{ env.AWS_REGION }}
        env:
          ECR_IMAGE_URI: ${{ steps.build-image.outputs.image }}
