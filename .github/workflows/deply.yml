name: deploy-docker

on:
  push:
    branches: [deploy-docker]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: lotto-automation

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          role-to-assume: ${{ secrets.AWS_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true # ECR 토큰 마스킹

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - name: Set image URI for deployment
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:latest"
          echo "::add-mask::$IMAGE_URI"
          echo "image=$IMAGE_URI" >> $GITHUB_OUTPUT
          echo "🎉 Build and push completed successfully"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Serverless CLI
        run: npm install -g serverless

      - name: serverless deploy
        uses: serverless/github-action@v3.1
        with:
          args: -c "serverless plugin install --name serverless-offline@12.0.4 && serverless deploy --stage Prod --region ap-northeast-2"
          entrypoint: /bin/sh
        env:
          CHROMIUM_LAYER_ARN: ${{ secrets.CHROMIUM_LAYER_ARN }}
          ECR_IMAGE_URI: ${{ steps.build-image.outputs.image }}
